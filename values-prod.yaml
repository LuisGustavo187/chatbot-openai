projectName: teste
namespace: default

serviceAccount:
  enabled: true
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::603915748871:role/teste-production

deployment:
  datadog:
      enabled: true
      env: "production"
  # initContainers:
  # - name: exemplo
  #   image: busy:box
  #   command: ["echo", "Hello, Kubernetes!"]
  # command: []
  labels: {}
  annotations: {}
  # targetContainer: "teste" # Nome do contÃªiner para o qual o service deve apontar
  containers:
    - name: teste
      image:
        registry: "603915748871.dkr.ecr.us-east-1.amazonaws.com"
        repository: "teste"
        tag: dfc9fd1
      readinessProbe:
        # tcpSocket:
        #   port: 3000
        # exec:
        #   command: ["echo", "Hello, Kubernetes!"]
        healthPath: /health
        failureThreshold: 3
        initialDelaySeconds: 150
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      livenessProbe:
        # tcpSocket:
        #   port: 3000
        # exec:
        #   command: ["echo", "Hello, Kubernetes!"]
        healthPath: /health
        failureThreshold: 3
        initialDelaySeconds: 150
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 10
      port: 3000
      resources:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "500m"
      ports:
        - containerPort: 3000
      envFrom:
        - configMapRef:
            name: teste-config
        - secretRef:
            name: teste-secret
      env: {}
      volumeMounts: {}
      #   - name: volume-name
      #     mountPath: "/path/to/mount"
      #     readOnly: true
      lifecycle: {}
        # postStart:
        #   exec:
        #     command: ["/bin/sh", "-c", "cp -r /app/. /var/www/app"]
  nodeSelector: {}
  tolerations: []
  affinity: {}
  volumes: []
  # - name: volume-name
  #   emptyDir: {}

configMaps:
  - name: teste-config
    data:
      ENVIRONMENT: "production"
      dasdas: "dasdadsa"

secrets: {}

externalSecrets: 
  - name: teste-secret
    refreshInterval: 5m
    useProperty: true
    data:
      dsadasdas: "dasdas"

hpa: 
  minReplicas: 1
  maxReplicas: 10
  cpuAverage: 160
  memoryAverage: 160

ingress:
- name: public
  ingressClassName: alb
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/group.name: default-public
    alb.ingress.kubernetes.io/backend-protocol: "HTTP"
    alb.ingress.kubernetes.io/certificate-arn: arn1345ydflgflgfg;er;re
    alb.ingress.kubernetes.io/healthcheck-path: /health
  hosts:
    - host: chatbot.com.br
      paths:
        - path: /
          portNumber: 3000
          pathType: Prefix